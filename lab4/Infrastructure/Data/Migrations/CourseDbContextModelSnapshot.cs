// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository.Data;

#nullable disable

namespace Repository.Data.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    partial class CourseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Version"));

                    b.HasKey("CourseId")
                        .HasName("course_pkey");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("Entity.CourseEnrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("enrollment_id");

                    b.Property<string>("CourseId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("course_id");

                    b.HasKey("EnrollmentId")
                        .HasName("course_enrollment_pkey");

                    b.HasIndex("CourseId");

                    b.ToTable("course_enrollment", (string)null);
                });

            modelBuilder.Entity("Entity.CourseModule", b =>
                {
                    b.Property<string>("ModuleId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("module_id");

                    b.Property<string>("CourseId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool?>("IsRequired")
                        .HasMaxLength(5)
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ModuleId")
                        .HasName("course_module_pkey");

                    b.HasIndex("CourseId");

                    b.ToTable("course_module", (string)null);
                });

            modelBuilder.Entity("Entity.CourseModuleStatus", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("enrollment_id");

                    b.Property<string>("ModuleId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<decimal?>("Progress")
                        .HasPrecision(3)
                        .HasColumnType("numeric(3)")
                        .HasColumnName("progress");

                    b.HasKey("EnrollmentId", "ModuleId")
                        .HasName("course_module_status_pkey");

                    b.HasIndex("ModuleId");

                    b.ToTable("course_module_status", (string)null);
                });

            modelBuilder.Entity("Entity.CourseStatus", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("enrollment_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<decimal?>("Progress")
                        .HasPrecision(3)
                        .HasColumnType("numeric(3)")
                        .HasColumnName("progress");

                    b.HasKey("EnrollmentId")
                        .HasName("course_status_pkey");

                    b.ToTable("course_status", (string)null);
                });

            modelBuilder.Entity("Entity.CourseEnrollment", b =>
                {
                    b.HasOne("Entity.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("course_enrollment_course_id_fkey");

                    b.HasOne("Entity.CourseStatus", "Enrollment")
                        .WithOne("CourseEnrollment")
                        .HasForeignKey("Entity.CourseEnrollment", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("course_enrollment_enrollment_id_fkey");

                    b.Navigation("Course");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("Entity.CourseModule", b =>
                {
                    b.HasOne("Entity.Course", "Course")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("course_module_course_id_fkey");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entity.CourseModuleStatus", b =>
                {
                    b.HasOne("Entity.CourseStatus", "Enrollment")
                        .WithMany("CourseModuleStatuses")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("course_module_status_enrollment_id_fkey");

                    b.HasOne("Entity.CourseModule", "Module")
                        .WithMany("CourseModuleStatuses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("course_module_status_module_id_fkey");

                    b.Navigation("Enrollment");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entity.Course", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseModules");
                });

            modelBuilder.Entity("Entity.CourseModule", b =>
                {
                    b.Navigation("CourseModuleStatuses");
                });

            modelBuilder.Entity("Entity.CourseStatus", b =>
                {
                    b.Navigation("CourseEnrollment");

                    b.Navigation("CourseModuleStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
